//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for BotStatus.
const (
	IDLE   BotStatus = "IDLE"
	MINING BotStatus = "MINING"
	MOVING BotStatus = "MOVING"
)

// Bot defines model for Bot.
type Bot struct {
	Coordinates Coordinates `json:"coordinates"`
	Identifier  string      `json:"identifier"`
	Name        string      `json:"name"`
	Status      BotStatus   `json:"status"`
}

// BotStatus defines model for Bot.Status.
type BotStatus string

// Coordinates defines model for Coordinates.
type Coordinates struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

// PostBotsBotIdMoveJSONRequestBody defines body for PostBotsBotIdMove for application/json ContentType.
type PostBotsBotIdMoveJSONRequestBody = Coordinates

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBots request
	GetBots(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBotsBotId request
	GetBotsBotId(ctx context.Context, botId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBotsBotIdMoveWithBody request with any body
	PostBotsBotIdMoveWithBody(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBotsBotIdMove(ctx context.Context, botId string, body PostBotsBotIdMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInit request
	PostInit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMines request
	GetMines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBots(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBotsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBotsBotId(ctx context.Context, botId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBotsBotIdRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBotsBotIdMoveWithBody(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBotsBotIdMoveRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBotsBotIdMove(ctx context.Context, botId string, body PostBotsBotIdMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBotsBotIdMoveRequest(c.Server, botId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMinesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBotsRequest generates requests for GetBots
func NewGetBotsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBotsBotIdRequest generates requests for GetBotsBotId
func NewGetBotsBotIdRequest(server string, botId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botId", runtime.ParamLocationPath, botId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBotsBotIdMoveRequest calls the generic PostBotsBotIdMove builder with application/json body
func NewPostBotsBotIdMoveRequest(server string, botId string, body PostBotsBotIdMoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBotsBotIdMoveRequestWithBody(server, botId, "application/json", bodyReader)
}

// NewPostBotsBotIdMoveRequestWithBody generates requests for PostBotsBotIdMove with any type of body
func NewPostBotsBotIdMoveRequestWithBody(server string, botId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botId", runtime.ParamLocationPath, botId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bots/%s/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInitRequest generates requests for PostInit
func NewPostInitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMinesRequest generates requests for GetMines
func NewGetMinesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBotsWithResponse request
	GetBotsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBotsResponse, error)

	// GetBotsBotIdWithResponse request
	GetBotsBotIdWithResponse(ctx context.Context, botId string, reqEditors ...RequestEditorFn) (*GetBotsBotIdResponse, error)

	// PostBotsBotIdMoveWithBodyWithResponse request with any body
	PostBotsBotIdMoveWithBodyWithResponse(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBotsBotIdMoveResponse, error)

	PostBotsBotIdMoveWithResponse(ctx context.Context, botId string, body PostBotsBotIdMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBotsBotIdMoveResponse, error)

	// PostInitWithResponse request
	PostInitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostInitResponse, error)

	// GetMinesWithResponse request
	GetMinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinesResponse, error)
}

type GetBotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Bot
}

// Status returns HTTPResponse.Status
func (r GetBotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBotsBotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bot
}

// Status returns HTTPResponse.Status
func (r GetBotsBotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotsBotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBotsBotIdMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bot
}

// Status returns HTTPResponse.Status
func (r PostBotsBotIdMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBotsBotIdMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bot   *Bot           `json:"bot,omitempty"`
		Mines *[]Coordinates `json:"mines,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostInitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Coordinates
}

// Status returns HTTPResponse.Status
func (r GetMinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBotsWithResponse request returning *GetBotsResponse
func (c *ClientWithResponses) GetBotsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBotsResponse, error) {
	rsp, err := c.GetBots(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBotsResponse(rsp)
}

// GetBotsBotIdWithResponse request returning *GetBotsBotIdResponse
func (c *ClientWithResponses) GetBotsBotIdWithResponse(ctx context.Context, botId string, reqEditors ...RequestEditorFn) (*GetBotsBotIdResponse, error) {
	rsp, err := c.GetBotsBotId(ctx, botId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBotsBotIdResponse(rsp)
}

// PostBotsBotIdMoveWithBodyWithResponse request with arbitrary body returning *PostBotsBotIdMoveResponse
func (c *ClientWithResponses) PostBotsBotIdMoveWithBodyWithResponse(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBotsBotIdMoveResponse, error) {
	rsp, err := c.PostBotsBotIdMoveWithBody(ctx, botId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBotsBotIdMoveResponse(rsp)
}

func (c *ClientWithResponses) PostBotsBotIdMoveWithResponse(ctx context.Context, botId string, body PostBotsBotIdMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBotsBotIdMoveResponse, error) {
	rsp, err := c.PostBotsBotIdMove(ctx, botId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBotsBotIdMoveResponse(rsp)
}

// PostInitWithResponse request returning *PostInitResponse
func (c *ClientWithResponses) PostInitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostInitResponse, error) {
	rsp, err := c.PostInit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInitResponse(rsp)
}

// GetMinesWithResponse request returning *GetMinesResponse
func (c *ClientWithResponses) GetMinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinesResponse, error) {
	rsp, err := c.GetMines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMinesResponse(rsp)
}

// ParseGetBotsResponse parses an HTTP response from a GetBotsWithResponse call
func ParseGetBotsResponse(rsp *http.Response) (*GetBotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Bot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBotsBotIdResponse parses an HTTP response from a GetBotsBotIdWithResponse call
func ParseGetBotsBotIdResponse(rsp *http.Response) (*GetBotsBotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBotsBotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBotsBotIdMoveResponse parses an HTTP response from a PostBotsBotIdMoveWithResponse call
func ParsePostBotsBotIdMoveResponse(rsp *http.Response) (*PostBotsBotIdMoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBotsBotIdMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInitResponse parses an HTTP response from a PostInitWithResponse call
func ParsePostInitResponse(rsp *http.Response) (*PostInitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bot   *Bot           `json:"bot,omitempty"`
			Mines *[]Coordinates `json:"mines,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMinesResponse parses an HTTP response from a GetMinesWithResponse call
func ParseGetMinesResponse(rsp *http.Response) (*GetMinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Coordinates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /bots)
	GetBots(w http.ResponseWriter, r *http.Request)

	// (GET /bots/{botId})
	GetBotsBotId(w http.ResponseWriter, r *http.Request, botId string)

	// (POST /bots/{botId}/move)
	PostBotsBotIdMove(w http.ResponseWriter, r *http.Request, botId string)

	// (POST /init)
	PostInit(w http.ResponseWriter, r *http.Request)

	// (GET /mines)
	GetMines(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBots operation middleware
func (siw *ServerInterfaceWrapper) GetBots(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBotsBotId operation middleware
func (siw *ServerInterfaceWrapper) GetBotsBotId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "botId" -------------
	var botId string

	err = runtime.BindStyledParameterWithOptions("simple", "botId", r.PathValue("botId"), &botId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "botId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBotsBotId(w, r, botId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBotsBotIdMove operation middleware
func (siw *ServerInterfaceWrapper) PostBotsBotIdMove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "botId" -------------
	var botId string

	err = runtime.BindStyledParameterWithOptions("simple", "botId", r.PathValue("botId"), &botId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "botId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBotsBotIdMove(w, r, botId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInit operation middleware
func (siw *ServerInterfaceWrapper) PostInit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMines operation middleware
func (siw *ServerInterfaceWrapper) GetMines(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/bots", wrapper.GetBots)
	m.HandleFunc("GET "+options.BaseURL+"/bots/{botId}", wrapper.GetBotsBotId)
	m.HandleFunc("POST "+options.BaseURL+"/bots/{botId}/move", wrapper.PostBotsBotIdMove)
	m.HandleFunc("POST "+options.BaseURL+"/init", wrapper.PostInit)
	m.HandleFunc("GET "+options.BaseURL+"/mines", wrapper.GetMines)

	return m
}

type GetBotsRequestObject struct {
}

type GetBotsResponseObject interface {
	VisitGetBotsResponse(w http.ResponseWriter) error
}

type GetBots200JSONResponse []Bot

func (response GetBots200JSONResponse) VisitGetBotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBotsBotIdRequestObject struct {
	BotId string `json:"botId"`
}

type GetBotsBotIdResponseObject interface {
	VisitGetBotsBotIdResponse(w http.ResponseWriter) error
}

type GetBotsBotId200JSONResponse Bot

func (response GetBotsBotId200JSONResponse) VisitGetBotsBotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBotsBotIdMoveRequestObject struct {
	BotId string `json:"botId"`
	Body  *PostBotsBotIdMoveJSONRequestBody
}

type PostBotsBotIdMoveResponseObject interface {
	VisitPostBotsBotIdMoveResponse(w http.ResponseWriter) error
}

type PostBotsBotIdMove200JSONResponse Bot

func (response PostBotsBotIdMove200JSONResponse) VisitPostBotsBotIdMoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostInitRequestObject struct {
}

type PostInitResponseObject interface {
	VisitPostInitResponse(w http.ResponseWriter) error
}

type PostInit200JSONResponse struct {
	Bot   *Bot           `json:"bot,omitempty"`
	Mines *[]Coordinates `json:"mines,omitempty"`
}

func (response PostInit200JSONResponse) VisitPostInitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinesRequestObject struct {
}

type GetMinesResponseObject interface {
	VisitGetMinesResponse(w http.ResponseWriter) error
}

type GetMines200JSONResponse []Coordinates

func (response GetMines200JSONResponse) VisitGetMinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /bots)
	GetBots(ctx context.Context, request GetBotsRequestObject) (GetBotsResponseObject, error)

	// (GET /bots/{botId})
	GetBotsBotId(ctx context.Context, request GetBotsBotIdRequestObject) (GetBotsBotIdResponseObject, error)

	// (POST /bots/{botId}/move)
	PostBotsBotIdMove(ctx context.Context, request PostBotsBotIdMoveRequestObject) (PostBotsBotIdMoveResponseObject, error)

	// (POST /init)
	PostInit(ctx context.Context, request PostInitRequestObject) (PostInitResponseObject, error)

	// (GET /mines)
	GetMines(ctx context.Context, request GetMinesRequestObject) (GetMinesResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetBots operation middleware
func (sh *strictHandler) GetBots(w http.ResponseWriter, r *http.Request) {
	var request GetBotsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBots(ctx, request.(GetBotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBots")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBotsResponseObject); ok {
		if err := validResponse.VisitGetBotsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBotsBotId operation middleware
func (sh *strictHandler) GetBotsBotId(w http.ResponseWriter, r *http.Request, botId string) {
	var request GetBotsBotIdRequestObject

	request.BotId = botId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBotsBotId(ctx, request.(GetBotsBotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBotsBotId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBotsBotIdResponseObject); ok {
		if err := validResponse.VisitGetBotsBotIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBotsBotIdMove operation middleware
func (sh *strictHandler) PostBotsBotIdMove(w http.ResponseWriter, r *http.Request, botId string) {
	var request PostBotsBotIdMoveRequestObject

	request.BotId = botId

	var body PostBotsBotIdMoveJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostBotsBotIdMove(ctx, request.(PostBotsBotIdMoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBotsBotIdMove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostBotsBotIdMoveResponseObject); ok {
		if err := validResponse.VisitPostBotsBotIdMoveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostInit operation middleware
func (sh *strictHandler) PostInit(w http.ResponseWriter, r *http.Request) {
	var request PostInitRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostInit(ctx, request.(PostInitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostInit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostInitResponseObject); ok {
		if err := validResponse.VisitPostInitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMines operation middleware
func (sh *strictHandler) GetMines(w http.ResponseWriter, r *http.Request) {
	var request GetMinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMines(ctx, request.(GetMinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinesResponseObject); ok {
		if err := validResponse.VisitGetMinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
